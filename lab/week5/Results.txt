Results for Tests on 5000 values

Depth = depth of tree, Cost = average #comparisons per search


             Ascending Order        Prefix Order        Random Order
Insert
Method       Depth      Cost     Depth      Cost     Depth      Cost

L             5000      3114        13        12        28        16

A             5000      1887      2954      1115        28        16

R             2492       952      1774       674        27        15

B              206        63        20        14        23        13

S         5000->31        24  5000->29        24  31->1149        23

V               13        12        13        12        15        12


Notes (what the above indicates):
Among all the Insert Methods, AVL Insert generates the most balanced 
trees for all the 3 orders and also the depth and cost of searching 
are the minimal. This is because AVL tree repairs the imbalance as 
soon as imbalance is found. The tree remains well balanced all the 
time. While other Insert methods' performance is not stable. reBalance
Insert is better because it balance the tree periodically, for ascending 
order is not good enough because the orginal tree is much too like a 
linked list, balanceing will not be most effective. For Splay Insert,
have some balancing implementation, so cost of search is good. When 
searching, the searched item will be moved to the root of the tree, so
the tree structure will be changed and depth also changes. For Leaf
Insert, Prefix Order data is best because it fits the Insert method of 
Leaf Insert and Random data is average case with O(log2n). Ascending 
or Descending data is worst case. For Insert at root and Random Insert,
random data is also best case, and other order just make the search 
expensive. 
